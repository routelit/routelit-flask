{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"routelit-flask","text":"<p>A Flask adapter for the RouteLit framework, enabling seamless integration of RouteLit's reactive UI components with Flask web applications.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install routelit routelit-flask\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from flask import Flask\nfrom routelit import RouteLit, RouteLitBuilder\nfrom routelit_flask import RouteLitFlaskAdapter\n\napp = Flask(__name__)\nroutelit = RouteLit()\nroutelit_adapter = RouteLitFlaskAdapter(routelit).configure(app)\n\n\ndef build_index_view(rl: RouteLitBuilder):\n  rl.text(\"Hello, World!\")\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    return routelit_adapter.response(build_index_view)\n</code></pre> <p>Mantained by @rolangom.</p> <p>Repository initiated with fpgmaas/cookiecutter-uv.</p>"},{"location":"modules/","title":"Modules","text":"<p>A Flask adapter for the RouteLit framework, enabling seamless integration of RouteLit's reactive UI components with Flask web applications.</p> Source code in <code>src/routelit_flask/adapter.py</code> <pre><code>class RouteLitFlaskAdapter:\n    \"\"\"\n    A Flask adapter for the RouteLit framework, enabling seamless integration of RouteLit's reactive UI components with Flask web applications.\n    \"\"\"\n\n    def __init__(\n        self,\n        routelit: RouteLit,\n        *,\n        static_path: Optional[str] = None,\n        template_path: str = get_default_template_path(),\n        run_mode: RunMode = \"prod\",\n        local_frontend_server: Optional[str] = None,\n        local_components_server: Optional[str] = None,\n        cookie_config: Optional[dict[str, Any]] = None,\n    ):\n        \"\"\"\n        Initialize the RouteLitFlaskAdapter.\n        - When run_mode=\"prod\", no need to specify local_frontend_server and local_components_server.\n        - When run_mode=\"dev_client\", you need to specify local_frontend_server.\n        - When run_mode=\"dev_components\", you need to specify local_components_server.\n\n        Args:\n            routelit (RouteLit): The RouteLit instance.\n            static_path (Optional[str]): The path to the static js/css assets are.\n            template_path (str): The path to the index.html template file. Default is in routelit package, so no need to specify.\n            run_mode (RunMode): The run mode. Example: \"prod\", \"dev_client\", \"dev_components\".\n            local_frontend_server (Optional[str]): The local vite frontend server. Example: \"http://localhost:5173\".\n            local_components_server (Optional[str]): The local vite components server. Example: \"http://localhost:5174\".\n            cookie_config (Optional[dict[str, Any]]): The cookie configuration. Default is production cookie config.\n        \"\"\"\n        self.routelit = routelit\n        self.static_path = static_path or get_default_static_path()\n        self.template_path = template_path\n        self.run_mode = run_mode\n        self.local_frontend_server = local_frontend_server\n        self.local_components_server = local_components_server\n        self.cookie_config = {**production_cookie_config, **(cookie_config or {})} if run_mode == \"prod\" else {}\n\n    @classmethod\n    def configure_static_assets(cls, flask_app: Flask, asset_target: AssetTarget) -&gt; None:\n        package_name, path = asset_target[\"package_name\"], asset_target[\"path\"]\n        assets_path = resources.files(package_name).joinpath(path)\n        flask_app.add_url_rule(\n            f\"/routelit/{package_name}/&lt;path:filename&gt;\",\n            endpoint=f\"assets_static_{package_name}\",\n            view_func=lambda filename: send_from_directory(str(assets_path), filename),\n        )\n\n    def configure(\n        self, flask_app: Flask, json_provider_class: Optional[Union[type[JSONProvider], Literal[False]]] = None\n    ) -&gt; \"RouteLitFlaskAdapter\":\n        \"\"\"\n        Configure the Flask application to use the RouteLitFlaskAdapter.\n\n        Args:\n            flask_app: The Flask application to configure.\n            json_provider_class: The JSON provider class to use. If None, use CustomJSONProvider. If False, do not set a custom JSON provider.\n\n        Returns:\n            The RouteLitFlaskAdapter instance.\n        \"\"\"\n        # Set custom JSON encoder\n        if json_provider_class is not False:\n            flask_app.json_provider_class = json_provider_class or CustomJSONProvider\n\n        for static_path in self.routelit.get_builder_class().get_client_resource_paths():\n            self.configure_static_assets(flask_app, static_path)\n\n        flask_app.add_url_rule(\n            \"/routelit/&lt;path:filename&gt;\",\n            endpoint=\"routelit_static\",\n            view_func=lambda filename: send_from_directory(self.static_path, filename),\n        )\n\n        # configure jinja templates for index.html\n        current_loader = flask_app.jinja_loader\n        if isinstance(current_loader, ChoiceLoader):\n            # Append to the list of loaders\n            current_loader.loaders.append(FileSystemLoader(self.template_path))  # type: ignore[attr-defined]\n        else:\n            # Wrap current loader and new one in a ChoiceLoader\n            flask_app.jinja_loader = ChoiceLoader([current_loader, FileSystemLoader(self.template_path)])  # type: ignore[list-item]\n        return self\n\n    def _handle_get_request(self, view_fn: ViewFn, request: FlaskRLRequest, **kwargs: Any) -&gt; Response:\n        rl_response = self.routelit.handle_get_request(view_fn, request, **kwargs)\n        response = make_response(\n            render_template(\n                \"index.html\",\n                ROUTELIT_DATA=rl_response.get_str_json_elements(),\n                PAGE_TITLE=rl_response.head.title,\n                PAGE_DESCRIPTION=rl_response.head.description,\n                RUN_MODE=self.run_mode,\n                LOCAL_FRONTEND_SERVER=self.local_frontend_server,\n                LOCAL_COMPONENTS_SERVER=self.local_components_server,\n                default_vite_assets=self.routelit.default_client_assets(),\n                importmap_json=self.routelit.get_importmap_json(),\n                vite_assets=self.routelit.client_assets(),\n                extra_head_content=self.routelit.get_extra_head_content(),\n                extra_body_content=self.routelit.get_extra_body_content(),\n            )\n        )\n        response.set_cookie(COOKIE_SESSION_KEY, request.get_session_id(), **self.cookie_config)\n        return response\n\n    def response(\n        self,\n        view_fn: ViewFn,\n        inject_builder: Optional[bool] = None,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; Response:\n        \"\"\"\n        Handle a request and return a response.\n\n        Args:\n            view_fn (ViewFn): The view function to handle the request.\n            inject_builder (Optional[bool]): Whether to inject the builder into the request.\n            *args: Additional arguments to pass to the view function.\n            **kwargs: Additional keyword arguments to pass to the view function.\n\n        Returns:\n            A Flask response.\n        \"\"\"\n        req = FlaskRLRequest(request)\n        if req.method == \"POST\":\n            actions = self.routelit.handle_post_request(view_fn, req, inject_builder, *args, **kwargs)\n            return jsonify(actions)\n        else:\n            return self._handle_get_request(view_fn, req, **kwargs)\n\n    def stream_response(\n        self,\n        view_fn: ViewFn,\n        inject_builder: Optional[bool] = None,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; Response:\n        \"\"\"\n        Handle a request and return a response.\n\n        Args:\n            view_fn (ViewFn): The view function to handle the request.\n            inject_builder (Optional[bool]): Whether to inject the builder into the request.\n            *args: Additional arguments to pass to the view function.\n            **kwargs: Additional keyword arguments to pass to the view function.\n\n        Returns:\n            A Flask response.\n        \"\"\"\n        req = FlaskRLRequest(request)\n        if req.method == \"POST\":\n            resp = Response(\n                stream_with_context(\n                    self.routelit.handle_post_request_stream_jsonl(view_fn, req, inject_builder, *args, **kwargs)\n                ),\n                mimetype=\"text/event-stream\",\n            )\n            resp.headers[\"Content-Type\"] = \"application/jsonlines\"\n            return resp\n        else:\n            return self._handle_get_request(view_fn, req, **kwargs)\n</code></pre> <p>The run mode for the RouteLitFlaskAdapter.</p> <ul> <li><code>prod</code>: Production mode.</li> <li><code>dev_client</code>: Development mode for the client.</li> <li><code>dev_components</code>: Development mode for the components.</li> </ul> <p>               Bases: <code>RouteLitRequest</code></p> <p>Implements the RouteLitRequest interface for Flask.</p> Source code in <code>src/routelit_flask/request.py</code> <pre><code>class FlaskRLRequest(RouteLitRequest):\n    \"\"\"\n    Implements the RouteLitRequest interface for Flask.\n    \"\"\"\n\n    def __init__(self, request: Request):\n        self.request = request\n        super().__init__()\n        self.__default_session_id = str(uuid.uuid4())\n\n    def get_headers(self) -&gt; dict[str, str]:\n        return self.request.headers  # type: ignore[return-value]\n\n    def get_path_params(self) -&gt; Optional[Mapping[str, Any]]:\n        return self.request.view_args\n\n    def get_referrer(self) -&gt; Optional[str]:\n        return self.request.referrer or self.request.headers.get(\"Referer\")\n\n    @property\n    def method(self) -&gt; str:\n        return self.request.method\n\n    def get_json(self) -&gt; Optional[Any]:\n        if self.is_json():\n            return self.request.json\n        else:\n            return None\n\n    def is_json(self) -&gt; bool:\n        return self.request.is_json\n\n    def get_query_param(self, key: str) -&gt; Optional[str]:\n        return self.request.args.get(key)\n\n    def get_query_param_list(self, key: str) -&gt; list[str]:\n        return self.request.args.getlist(key)\n\n    def get_session_id(self) -&gt; str:\n        return self.request.cookies.get(COOKIE_SESSION_KEY, self.__default_session_id)\n\n    def get_pathname(self) -&gt; str:\n        return self.request.path\n\n    def get_host(self) -&gt; str:\n        return self.request.host\n</code></pre>"},{"location":"modules/#adapter.RouteLitFlaskAdapter.__init__","title":"<code>__init__(routelit, *, static_path=None, template_path=get_default_template_path(), run_mode='prod', local_frontend_server=None, local_components_server=None, cookie_config=None)</code>","text":"<p>Initialize the RouteLitFlaskAdapter. - When run_mode=\"prod\", no need to specify local_frontend_server and local_components_server. - When run_mode=\"dev_client\", you need to specify local_frontend_server. - When run_mode=\"dev_components\", you need to specify local_components_server.</p> <p>Parameters:</p> Name Type Description Default <code>routelit</code> <code>RouteLit</code> <p>The RouteLit instance.</p> required <code>static_path</code> <code>Optional[str]</code> <p>The path to the static js/css assets are.</p> <code>None</code> <code>template_path</code> <code>str</code> <p>The path to the index.html template file. Default is in routelit package, so no need to specify.</p> <code>get_default_template_path()</code> <code>run_mode</code> <code>RunMode</code> <p>The run mode. Example: \"prod\", \"dev_client\", \"dev_components\".</p> <code>'prod'</code> <code>local_frontend_server</code> <code>Optional[str]</code> <p>The local vite frontend server. Example: \"http://localhost:5173\".</p> <code>None</code> <code>local_components_server</code> <code>Optional[str]</code> <p>The local vite components server. Example: \"http://localhost:5174\".</p> <code>None</code> <code>cookie_config</code> <code>Optional[dict[str, Any]]</code> <p>The cookie configuration. Default is production cookie config.</p> <code>None</code> Source code in <code>src/routelit_flask/adapter.py</code> <pre><code>def __init__(\n    self,\n    routelit: RouteLit,\n    *,\n    static_path: Optional[str] = None,\n    template_path: str = get_default_template_path(),\n    run_mode: RunMode = \"prod\",\n    local_frontend_server: Optional[str] = None,\n    local_components_server: Optional[str] = None,\n    cookie_config: Optional[dict[str, Any]] = None,\n):\n    \"\"\"\n    Initialize the RouteLitFlaskAdapter.\n    - When run_mode=\"prod\", no need to specify local_frontend_server and local_components_server.\n    - When run_mode=\"dev_client\", you need to specify local_frontend_server.\n    - When run_mode=\"dev_components\", you need to specify local_components_server.\n\n    Args:\n        routelit (RouteLit): The RouteLit instance.\n        static_path (Optional[str]): The path to the static js/css assets are.\n        template_path (str): The path to the index.html template file. Default is in routelit package, so no need to specify.\n        run_mode (RunMode): The run mode. Example: \"prod\", \"dev_client\", \"dev_components\".\n        local_frontend_server (Optional[str]): The local vite frontend server. Example: \"http://localhost:5173\".\n        local_components_server (Optional[str]): The local vite components server. Example: \"http://localhost:5174\".\n        cookie_config (Optional[dict[str, Any]]): The cookie configuration. Default is production cookie config.\n    \"\"\"\n    self.routelit = routelit\n    self.static_path = static_path or get_default_static_path()\n    self.template_path = template_path\n    self.run_mode = run_mode\n    self.local_frontend_server = local_frontend_server\n    self.local_components_server = local_components_server\n    self.cookie_config = {**production_cookie_config, **(cookie_config or {})} if run_mode == \"prod\" else {}\n</code></pre>"},{"location":"modules/#adapter.RouteLitFlaskAdapter.configure","title":"<code>configure(flask_app, json_provider_class=None)</code>","text":"<p>Configure the Flask application to use the RouteLitFlaskAdapter.</p> <p>Parameters:</p> Name Type Description Default <code>flask_app</code> <code>Flask</code> <p>The Flask application to configure.</p> required <code>json_provider_class</code> <code>Optional[Union[type[JSONProvider], Literal[False]]]</code> <p>The JSON provider class to use. If None, use CustomJSONProvider. If False, do not set a custom JSON provider.</p> <code>None</code> <p>Returns:</p> Type Description <code>RouteLitFlaskAdapter</code> <p>The RouteLitFlaskAdapter instance.</p> Source code in <code>src/routelit_flask/adapter.py</code> <pre><code>def configure(\n    self, flask_app: Flask, json_provider_class: Optional[Union[type[JSONProvider], Literal[False]]] = None\n) -&gt; \"RouteLitFlaskAdapter\":\n    \"\"\"\n    Configure the Flask application to use the RouteLitFlaskAdapter.\n\n    Args:\n        flask_app: The Flask application to configure.\n        json_provider_class: The JSON provider class to use. If None, use CustomJSONProvider. If False, do not set a custom JSON provider.\n\n    Returns:\n        The RouteLitFlaskAdapter instance.\n    \"\"\"\n    # Set custom JSON encoder\n    if json_provider_class is not False:\n        flask_app.json_provider_class = json_provider_class or CustomJSONProvider\n\n    for static_path in self.routelit.get_builder_class().get_client_resource_paths():\n        self.configure_static_assets(flask_app, static_path)\n\n    flask_app.add_url_rule(\n        \"/routelit/&lt;path:filename&gt;\",\n        endpoint=\"routelit_static\",\n        view_func=lambda filename: send_from_directory(self.static_path, filename),\n    )\n\n    # configure jinja templates for index.html\n    current_loader = flask_app.jinja_loader\n    if isinstance(current_loader, ChoiceLoader):\n        # Append to the list of loaders\n        current_loader.loaders.append(FileSystemLoader(self.template_path))  # type: ignore[attr-defined]\n    else:\n        # Wrap current loader and new one in a ChoiceLoader\n        flask_app.jinja_loader = ChoiceLoader([current_loader, FileSystemLoader(self.template_path)])  # type: ignore[list-item]\n    return self\n</code></pre>"},{"location":"modules/#adapter.RouteLitFlaskAdapter.response","title":"<code>response(view_fn, inject_builder=None, *args, **kwargs)</code>","text":"<p>Handle a request and return a response.</p> <p>Parameters:</p> Name Type Description Default <code>view_fn</code> <code>ViewFn</code> <p>The view function to handle the request.</p> required <code>inject_builder</code> <code>Optional[bool]</code> <p>Whether to inject the builder into the request.</p> <code>None</code> <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the view function.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the view function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>A Flask response.</p> Source code in <code>src/routelit_flask/adapter.py</code> <pre><code>def response(\n    self,\n    view_fn: ViewFn,\n    inject_builder: Optional[bool] = None,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; Response:\n    \"\"\"\n    Handle a request and return a response.\n\n    Args:\n        view_fn (ViewFn): The view function to handle the request.\n        inject_builder (Optional[bool]): Whether to inject the builder into the request.\n        *args: Additional arguments to pass to the view function.\n        **kwargs: Additional keyword arguments to pass to the view function.\n\n    Returns:\n        A Flask response.\n    \"\"\"\n    req = FlaskRLRequest(request)\n    if req.method == \"POST\":\n        actions = self.routelit.handle_post_request(view_fn, req, inject_builder, *args, **kwargs)\n        return jsonify(actions)\n    else:\n        return self._handle_get_request(view_fn, req, **kwargs)\n</code></pre>"},{"location":"modules/#adapter.RouteLitFlaskAdapter.stream_response","title":"<code>stream_response(view_fn, inject_builder=None, *args, **kwargs)</code>","text":"<p>Handle a request and return a response.</p> <p>Parameters:</p> Name Type Description Default <code>view_fn</code> <code>ViewFn</code> <p>The view function to handle the request.</p> required <code>inject_builder</code> <code>Optional[bool]</code> <p>Whether to inject the builder into the request.</p> <code>None</code> <code>*args</code> <code>Any</code> <p>Additional arguments to pass to the view function.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the view function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>A Flask response.</p> Source code in <code>src/routelit_flask/adapter.py</code> <pre><code>def stream_response(\n    self,\n    view_fn: ViewFn,\n    inject_builder: Optional[bool] = None,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; Response:\n    \"\"\"\n    Handle a request and return a response.\n\n    Args:\n        view_fn (ViewFn): The view function to handle the request.\n        inject_builder (Optional[bool]): Whether to inject the builder into the request.\n        *args: Additional arguments to pass to the view function.\n        **kwargs: Additional keyword arguments to pass to the view function.\n\n    Returns:\n        A Flask response.\n    \"\"\"\n    req = FlaskRLRequest(request)\n    if req.method == \"POST\":\n        resp = Response(\n            stream_with_context(\n                self.routelit.handle_post_request_stream_jsonl(view_fn, req, inject_builder, *args, **kwargs)\n            ),\n            mimetype=\"text/event-stream\",\n        )\n        resp.headers[\"Content-Type\"] = \"application/jsonlines\"\n        return resp\n    else:\n        return self._handle_get_request(view_fn, req, **kwargs)\n</code></pre>"}]}